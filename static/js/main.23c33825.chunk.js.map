{"version":3,"sources":["components/UserList/UsersList.selectors.js","components/UserList/UserList.js","components/UserList/index.js","components/UserList/UserList.actions.js","utils/SortDates.js","components/Graph/Graph.selectors.js","components/Graph/Graph.js","components/Graph/index.js","components/Measurements/Measurements.selectors.js","components/AddMeasurementDialog/AddMeasurementDialog.selectors.js","components/AddMeasurementDialog/AddMeasurementDialog.js","components/AddMeasurementDialog/AddMeasurementDialog.actions.js","components/AddMeasurementDialog/index.js","components/Measurements/Measurements.actions.js","components/UserList/UserList.reducers.js","components/Measurements/Measurements.reducers.js","components/AddMeasurementDialog/AddMeasurementDialog.reducers.js","store/index.js","components/Measurements/Measurements.js","components/Measurements/index.js","components/User/User.js","components/User/index.js","components/Landing/Landing.js","components/App/App.js","index.js"],"names":["getUsers","state","users","checkIsFetching","isFetching","getUsersTotal","usersTotal","getPages","loadedPages","UserList","page","perPage","handleFirstPageButtonClick","_this","loadPage","handleBackButtonClick","handleNextButtonClick","handleLastPageButtonClick","props","Math","ceil","_this$props","pages","getUsersList","includes","setState","_this$props2","this","length","_this$props3","react_default","a","createElement","className","slice","indexOf","map","_ref","id","first_name","last_name","Link_default","component","react_router_dom","Object","assign","to","concat","key","color","IconButton_default","onClick","disabled","aria-label","FirstPage_default","KeyboardArrowLeft_default","KeyboardArrowRight_default","LastPage_default","Component","mapDispatchToProps","asyncToGenerator","regenerator_default","mark","_callee","dispatch","result","total","wrap","_context","prev","next","type","payload","axios","get","sent","status","abrupt","data","t0","stop","_x","apply","arguments","connect","sortDates","b","moment","isSame","isBefore","getMeasurements","toConsumableArray","measurements","filter","item","userId","sort","date","Graph","currentRange","conf","year","unit","sub","month","week","getMinDate","maxDate","getMaxDate","arrayOfDates","subtract","undefined","maxMinusWeek","add","updateGraph","chart","datasets","dataset","updated","x","y","weight","measurement","isAfter","objectSpread","options","scales","xAxes","time","min","max","update","setRange","range","setWeek","ctx","document","getElementById","getContext","Chart","label","xAxisID","yAxisID","fill","lineTension","borderWidth","pointRadius","backgroundColor","borderColor","responsive","aspectRatio","maintainAspectRatio","title","display","text","tooltips","intersect","mode","callbacks","tooltipItem","myData","datasetIndex","parseFloat","value","toFixed","distribution","ticks","source","autoSkip","scaleLabel","labelString","yAxes","nextProps","_this2","Button_default","variant","height","width","checkIsAdding","addMeasurement","addingMeasurement","AddMeasurementDialog","format","lostMuchWeight","lostMuchWeightDialogShown","handleClose","toggleMeasurementDialog","newMeasurement","match","params","checkLostMuchWeight","obj","allMeasurements","parseInt","onWeightChange","event","currentTarget","onDateChange","inputProps","Fragment","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","onChange","pattern","inputMode","defaultValue","DialogActions_default","withRouter","defaultState","addons","applyMiddleware","thunk","reducers","combineReducers","initialState","action","store","createStore","compose","Measurements","measurementsTotal","addNewMeasurement","deleteMeasurement","deleteAllMeasurements","classes","index","Button_Button_default","button","components_AddMeasurementDialog","IconButton_IconButton_default","withStyles","theme","marginRight","spacing","User","components_Graph","components_Measurements","MyLink","Landing","createMuiTheme","palette","primary","blue","secondary","pink","typography","useNextVariants","App","styles","es","basename","react_router","path","exact","ReactDOM","render","components_App_App"],"mappings":"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","file":"static/js/main.23c33825.chunk.js","sourcesContent":["export const getUsers = state => (state.users.users);\nexport const checkIsFetching = state => (state.users.isFetching);\nexport const getUsersTotal = state => (state.users.usersTotal);\nexport const getPages = state => (state.users.loadedPages);","import React, {Component} from 'react';\nimport {Link as RouterLink} from \"react-router-dom\";\nimport Link from '@material-ui/core/Link';\nimport './UserList.scss';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\n/**\n * Creates list of users.\n * @namespace UserList\n * @class UserList\n */\nclass UserList extends Component {\n    state = {page: 1, perPage: 5};\n\n    /** @function componentDidMount\n     * requests users when component did mount\n     * @memberof UserList#\n     */\n    componentDidMount() {\n        const {users, isFetching, getUsersList} = this.props;\n        if (users.length === 0 && !isFetching) {\n            getUsersList(1);\n        }\n    }\n\n    /** @function handleFirstPageButtonClick\n     * request users\n     * sets page in state to 1\n     * @memberof UserList#\n     */\n    handleFirstPageButtonClick = () => {\n        this.loadPage(1);\n    };\n\n    /** @function handleBackButtonClick\n     * request users\n     * sets page in state to previous number\n     * @memberof UserList#\n     */\n    handleBackButtonClick = () => {\n        const page = this.state.page - 1;\n        this.loadPage(page);\n    };\n\n    /** @function handleNextButtonClick\n     * request users\n     * sets page in state to next number\n     * @memberof UserList#\n     */\n    handleNextButtonClick = () => {\n        const page = this.state.page + 1;\n            this.loadPage(page);\n    };\n\n    /** @function handleLastPageButtonClick\n     * request users\n     * sets page in state to count of pages\n     * @memberof UserList#\n     */\n    handleLastPageButtonClick = () => {\n        const {usersTotal} = this.props;\n        const page = Math.ceil(usersTotal / this.state.perPage);\n        this.loadPage(page);\n    };\n\n    /**\n     * loades defined page of users\n     * @param {number} page - number of page to load\n     * @memberof UserList#\n     */\n    loadPage = (page)=>{\n        const {pages, getUsersList} = this.props;\n        if (!pages.includes(page)) {\n            getUsersList(page);\n        }\n        this.setState({page: page});\n    };\n\n    render() {\n        const {users, usersTotal, pages} = this.props;\n        return (\n            <section className=\"UserList\">\n                <h2 className=\"UserList__title\">Users</h2>\n                {\n                    users\n                        .slice(pages.indexOf(this.state.page) * this.state.perPage,\n                            pages.indexOf(this.state.page) * this.state.perPage + this.state.perPage)\n                        .map(({id, first_name, last_name}) => {\n                                const MyLink = props => <RouterLink {...props} to={`/users/${id}`}/>;\n                                return (<Link component={MyLink} key={id} color=\"primary\" className=\"UserList__link\">\n                                    {first_name} {last_name}\n                                </Link>)\n                            }\n                        )\n                }\n                <nav className=\"UserList__pagination\">\n                    <IconButton\n                        onClick={this.handleFirstPageButtonClick}\n                        disabled={this.state.page === 1}\n                        aria-label=\"First Page\">\n                        <FirstPageIcon/>\n                    </IconButton>\n                    <IconButton\n                        onClick={this.handleBackButtonClick}\n                        disabled={this.state.page === 1}\n                        aria-label=\"Previous Page\">\n                        <KeyboardArrowLeft/>\n                    </IconButton>\n                    <IconButton\n                        onClick={this.handleNextButtonClick}\n                        disabled={usersTotal === 0 ||\n                        this.state.page === (Math.ceil(usersTotal / this.state.perPage))}\n                        aria-label=\"Next Page\">\n                        <KeyboardArrowRight/>\n                    </IconButton>\n                    <IconButton\n                        onClick={this.handleLastPageButtonClick}\n                        disabled={usersTotal === 0 ||\n                        this.state.page === (Math.ceil(usersTotal / this.state.perPage))}\n                        aria-label=\"Last Page\">\n                        <LastPageIcon/>\n                    </IconButton>\n                </nav>\n            </section>\n        );\n    }\n}\n\nexport default UserList;\n","import {getUsersList} from './UserList.actions';\nimport {getUsers,checkIsFetching,getUsersTotal,getPages} from './UsersList.selectors';\nimport { connect } from 'react-redux';\nimport UserList from './UserList';\n\nconst mapStateToProps = state => ({\n    users: getUsers(state),\n    isFetching: checkIsFetching(state),\n    usersTotal: getUsersTotal(state),\n    pages: getPages(state)\n});\n\nconst mapDispatchToProps = {\n    getUsersList,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);\n\n","import axios from 'axios';\n\n/**\n * create action to add users to store\n * @memberof module:UserList\n * @param {object} payload\n * @param {object[]} payload.users\n * @param {number} payload.usersTotal\n * @param {number[]} payload.loadedPages\n * @returns {{type: string, payload: *}}\n */\nexport const userListSet = payload => ({\n    type: 'USER_LIST_SET',\n    payload,\n});\n\n/**\n * create action to set start of loading of users\n * @memberof module:UserList\n * @returns {{type: string, payload: boolean}}\n */\nexport const startLoading = () => ({\n    type: 'USER_LIST_FETCHING',\n    payload: true,\n});\n\n/**\n * create action to set stop of loading of users\n * @memberof module:UserList\n * @returns {{type: string, payload: boolean}}\n */\nexport const stopLoading = () => ({\n    type: 'USER_LIST_FETCHING',\n    payload: false,\n});\n\n/**\n * create action to request users from server\n * @memberof module:UserList\n * @param page - number of requested page\n * @returns {Function} - dispatches stopLoading or startLoading\n */\nexport const getUsersList = (page) => async dispatch => {\n    try {\n        dispatch(startLoading());\n        const result = await axios.get(`https://reqres.in/api/users?per_page=5&page=${page}`);\n        if (result.status !== 200) {\n            return dispatch(stopLoading());\n        }\n        const users = result.data.data;\n        const total = result.data.total;\n        const action = userListSet({users: users, usersTotal: total, loadedPages: +page});\n        dispatch(action);\n    } catch (error) {\n        return dispatch(stopLoading());\n    }\n};","import moment from \"moment\";\n\nexport const sortDates = (a, b) =>{\n    if(moment(a).isSame(moment(b))){\n        return 0;\n    }\n    else if(moment(a).isBefore(moment(b))){\n        return -1;\n    }\n    return 1;\n};","import {sortDates} from \"../../utils/SortDates\";\n\nexport const getMeasurements = (state, id) => (\n    [...state.measurements.measurements\n        .filter(item => item.userId === id)]\n        .sort((a,b)=>sortDates(a.date,b.date)));","import React, {Component} from 'react';\nimport Chart from 'chart.js';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\nimport './Graph.scss';\nimport {sortDates} from '../../utils/SortDates';\n\n/**\n * Creates graph.\n * @namespace Graph\n * @class Graph\n */\nclass Graph extends Component {\n    state = {currentRange: 'month'};\n\n    conf = {\n        'year': {\n            unit: 'month',\n            sub: 'years'\n        },\n        'month': {\n            unit: 'week',\n            sub: 'months'\n        },\n        'week': {\n            unit: 'day',\n            sub: 'weeks'\n        }\n    };\n\n    /** @function getMinDate\n     * @memberof Graph#\n     * @param {Object[]} measurements - array of measurements\n     * @param {string} measurements[].userId - id of user.\n     * @param {string} measurements[].weight - weight of user.\n     * @param {Date} measurements[].date - date of measurement.\n     * @returns min date\n     */\n    getMinDate = (measurements) => {\n        let maxDate = this.getMaxDate(measurements);\n        const arrayOfDates = measurements.map(item => item.date);\n        arrayOfDates\n            .sort((a, b) => sortDates(a,b));\n        let date = arrayOfDates[0];\n        date = moment(date).subtract(1, 'days');\n        if (maxDate === undefined) return undefined;\n        const maxMinusWeek = moment(maxDate).subtract(1, 'days').subtract(1, this.conf[this.state.currentRange].sub);\n        return date.isBefore(maxMinusWeek) ? maxMinusWeek : date;\n    };\n\n    /** @function getMaxDate\n     * @memberof Graph#\n     * @param {Object[]} measurements - array of measurements\n     * @param {string} measurements[].userId - id of user.\n     * @param {string} measurements[].weight - weight of user.\n     * @param {Date} measurements[].date - date of measurement.\n     * @returns max date\n     */\n    getMaxDate = (measurements) => {\n        const arrayOfDates = measurements.map(item => item.date);\n        arrayOfDates\n            .sort((a,b)=>sortDates(a,b));\n        let date = arrayOfDates.slice(-1)[0];\n        date = moment(date).add(1, 'days');\n        if (date === undefined) return undefined;\n        return (date);\n    };\n\n    /** @function componentDidMount\n     * initializes graph when component did mount\n     * @memberof Graph#\n     */\n    componentDidMount() {\n        const {measurements} = this.props;\n        const ctx = document.getElementById('myChart').getContext('2d');\n        this.chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                datasets: [{\n                    label: 'My weight',\n                    xAxisID: 'time',\n                    yAxisID: 'weight',\n                    fill: false,\n                    lineTension: 0,\n                    borderWidth: 2,\n                    pointRadius: 5,\n                    backgroundColor: 'rgba(255, 99, 132, .5)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data:\n                        measurements.map(item => ({x: moment(item.date), y: item.weight})\n                        )\n                }]\n            },\n            options: {\n                responsive: true,\n                aspectRatio: 0,\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Weight graph'\n                },\n                tooltips: {\n                    intersect: false,\n                    mode: 'index',\n                    callbacks: {\n                        label: function (tooltipItem, myData) {\n                            let label = myData.datasets[tooltipItem.datasetIndex].label || '';\n                            if (label) {\n                                label += ': ';\n                            }\n                            label += parseFloat(tooltipItem.value).toFixed(2);\n                            return label;\n                        }\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        id: 'time',\n                        type: 'time',\n                        display: true,\n                        distribution: 'linear',\n                        time: {\n                            min: this.getMinDate(measurements),\n                            max: this.getMaxDate(measurements),\n                            unit: this.conf[this.state.currentRange].unit,\n                        },\n                        ticks: {\n                            source: 'auto',\n                            autoSkip: true\n                        },\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Dates'\n                        },\n                    }],\n                    yAxes: [{\n                        id: 'weight',\n                        type: 'linear',\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Weight in kgs'\n                        },\n                    }],\n                }\n            }\n        });\n    }\n\n    /** @function componentWillReceiveProps\n     * updates graph when component receive new props\n     * @memberof Graph#\n     */\n    componentWillReceiveProps(nextProps) {\n        this.updateGraph(nextProps);\n    }\n\n    /** @function updateGraph\n     * updates graph\n     * @memberof Graph#\n     * @param {Object} props\n     */\n    updateGraph = (props) => {\n        this.chart.data.datasets = this.chart.data.datasets.map((dataset) => {\n\n            const updated = props.measurements.map(item => {\n                return {x: moment(item.date), y: item.weight}\n            }).filter((measurement) => {\n                const unit = moment().subtract(1, this.conf[this.state.currentRange].sub);\n                return moment(measurement.x).isAfter(unit);\n            });\n            return {\n                ...dataset,\n                data: updated,\n            }\n        });\n        this.chart.options.scales.xAxes[0].time.unit = this.conf[this.state.currentRange].unit;\n        this.chart.options.scales.xAxes[0].time.min = this.getMinDate(props.measurements);\n        this.chart.options.scales.xAxes[0].time.max = this.getMaxDate(props.measurements);\n\n        this.chart.update();\n    };\n\n\n    /** @function setRange\n     * updates graph and updates currentRange in state\n     * @memberof Graph#\n     * @param {String} range - dates range\n     */\n    setRange = (range) => {\n        this.setState({currentRange: range}, ()=>this.updateGraph(this.props));\n    };\n\n    /** @function setWeek\n     * sets range to week\n     */\n    setWeek = () => {\n        this.setRange('week')\n    };\n\n    render() {\n        return (\n            <div className=\"Graph\">\n                <Button color=\"primary\" variant={this.state.currentRange === 'week' ? 'outlined' : 'text'}\n                        onClick={this.setWeek}>\n                    Week\n                </Button>\n                <Button color=\"primary\" variant={this.state.currentRange === 'month' ? 'outlined' : 'text'}\n                        onClick={() => {\n                            this.setRange('month')\n                        }}>\n                    Month\n                </Button>\n                <Button color=\"primary\" variant={this.state.currentRange === 'year' ? 'outlined' : 'text'}\n                        onClick={() => {\n                            this.setRange('year')\n                        }}>\n                    Year\n                </Button>\n                <canvas height=\"100%\" width=\"100%\" id=\"myChart\"/>\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import {getMeasurements} from './Graph.selectors';\nimport { connect } from 'react-redux';\nimport Graph from \"./Graph\";\n\nconst mapStateToProps = (state, props) => ({\n    measurements: getMeasurements(state, props.userId),\n});\n\nexport default connect(mapStateToProps)(Graph);\n\n","import {sortDates} from \"../../utils/SortDates\";\n\nexport const getMeasurements = (state, id) => {\n    return (\n        [...state.measurements.measurements\n            .filter(item => item.userId === id)]\n            .sort((a,b)=>sortDates(b.date,a.date))\n    );\n};","import {sortDates} from '../../utils/SortDates';\nexport const checkIsAdding = state => (state.addMeasurement.addingMeasurement);\nexport const getMeasurements = (state, id) => {\n    return (\n        [...state.measurements.measurements\n            .filter(item => item.userId === id)]\n            .sort((a,b)=>sortDates(a,b))\n    );\n};","import React, {Component} from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\nimport {sortDates} from \"../../utils/SortDates\";\n\n/**\n * Creates a new dialog to add measurement.\n * @namespace AddMeasurementDialog\n * @class AddMeasurementDialog\n */\nclass AddMeasurementDialog extends Component {\n    state = {\n        weight: '',\n        date: moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"),\n        lostMuchWeight: false,\n        lostMuchWeightDialogShown: false\n    };\n\n    /** @function handleClose\n     * closes dialog\n     * @memberof AddMeasurementDialog#\n     */\n    handleClose = () => {\n        const {toggleMeasurementDialog} = this.props;\n        toggleMeasurementDialog(false);\n        this.setState({weight: ''});\n    };\n\n    /** @function addMeasurement\n     * adds new measurement\n     * @memberof AddMeasurementDialog#\n     */\n    addMeasurement = () => {\n        const {addMeasurement} = this.props;\n        if (this.state.weight !== '' && moment(this.state.date).isBefore(moment())) {\n\n            const newMeasurement = {\n                userId: this.props.match.params.id,\n                weight: this.state.weight,\n                date: moment(this.state.date)\n            };\n\n            addMeasurement(newMeasurement);\n            if (this.checkLostMuchWeight(newMeasurement)) {\n                this.setState({lostMuchWeight: true});\n            }\n            this.setState({weight: ''});\n        }\n    };\n\n    /** @function checkLostMuchWeight\n     * checks if user has lost 5kgs or more since first entry\n     * @memberof AddMeasurementDialog#\n     * @param obj - measurement object\n     * @param {string} obj.userId - id of user.\n     * @param {string} obj.weight - weight of user.\n     * @param {Date} obj.date - date of measurement.\n     */\n    checkLostMuchWeight = (obj) => {\n        const {measurements} = this.props;\n        const allMeasurements = [...measurements, obj].sort((a, b) => sortDates(a.date, b.date));\n        if (allMeasurements.length === 0) {\n            return false;\n        }\n\n        return parseInt(allMeasurements[0].weight, 10) - parseInt(obj.weight, 10) >= 5;\n    };\n\n    /** @function onWeightChange\n     * updates weight in state\n     * @memberof AddMeasurementDialog#\n     * @param event\n     */\n    onWeightChange = (event) => {\n        this.setState({weight: event.currentTarget.value});\n    };\n\n    /** @function onDateChange\n     * updates date in state\n     * @memberof AddMeasurementDialog#\n     * @param event\n     */\n    onDateChange = (event) => {\n        this.setState({date: event.currentTarget.value});\n    };\n\n\n    render() {\n        const inputProps = {\n            max: moment().format('YYYY-MM-DD'),\n        };\n\n        const disabled = (this.state.weight === '' ||\n            this.state.weight < 1 || moment(this.state.date).isAfter(moment()));\n\n        const {addingMeasurement} = this.props;\n\n        return (\n            <>\n                <Dialog\n                    open={addingMeasurement}\n                    onClose={this.handleClose}>\n                    <DialogTitle>Subscribe</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Add new measurement\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            label=\"Weight(kg)\"\n                            value={this.state.weight}\n                            onChange={this.onWeightChange}\n                            pattern=\"[0-9]*\"\n                            inputMode=\"numeric\"\n                            type=\"number\"/>\n                        <TextField\n                            label=\"Date\"\n                            type=\"datetime-local\"\n                            onChange={this.onDateChange}\n                            defaultValue={moment().format(\"YYYY-MM-DD[T]HH:mm:ss\")}\n                            inputProps={inputProps}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose}\n                                color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={() => this.addMeasurement()}\n                                color=\"primary\"\n                                disabled={disabled}>\n                            Add measurement\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Dialog open={this.state.lostMuchWeight && !this.state.lostMuchWeightDialogShown}>\n                    <DialogTitle>Way to go! You've lost 5 kgs!</DialogTitle>\n                    <Button onClick={() => this.setState({lostMuchWeight: false, lostMuchWeightDialogShown: true})}\n                            color=\"primary\">\n                        Close\n                    </Button>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport default AddMeasurementDialog;\n","/**\n * create action to open or close dialog\n * @namespace @memberof module:AddMeasurementDialog\n * @param {boolean} payload - true to open dialog, false to close\n * @returns {{type: string, payload: true | false}} - action that ready to dispatch\n */\nconst toggleMeasurementDialog = payload =>({\n    type: 'TOGGLE_MEASUREMENT_DIALOG',\n    payload: payload,\n});\n\nexport default toggleMeasurementDialog;\n","import {checkIsAdding, getMeasurements} from './AddMeasurementDialog.selectors';\nimport { connect } from 'react-redux';\nimport AddMeasurementDialog from \"./AddMeasurementDialog\";\nimport toggleMeasurementDialog from \"./AddMeasurementDialog.actions\";\nimport {addMeasurement} from '../Measurements/Measurements.actions';\nimport { withRouter } from \"react-router\";\n\nconst mapStateToProps = (state, props)  => ({\n    addingMeasurement: checkIsAdding(state),\n    measurements: getMeasurements(state, props.userId),\n});\n\nconst mapDispatchToProps = {\n    toggleMeasurementDialog,\n    addMeasurement\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(AddMeasurementDialog));\n\n","/**\n * create action to add measurement\n * @memberof module:Measurements#\n * @param {object} payload\n * @param {string} payload.userId - id of user\n * @param {string} payload.weight - weight of user\n * @param {Date} payload.date - date of measurement\n * @returns {{type: string, payload: *}}\n */\nexport const addMeasurement = payload => ({\n    type: 'ADD_MEASUREMENT',\n    payload,\n});\n\n/**\n * create action to delete measurement\n * @memberof module:Measurements#\n * @param {object} payload\n * @param {string} payload.userId - id of user\n * @param {Date} payload.date - date of measurement\n * @returns {{type: string, payload: *}}\n */\nexport const deleteMeasurement = payload => ({\n    type: 'DELETE_MEASUREMENT',\n    payload,\n});\n\n/**\n * create action to delete all measurements of user\n * @memberof module:Measurements#\n * @param {object} payload\n * @param {string} payload.userId - id of user\n * @returns {{type: string, payload: *}}\n */\nexport const deleteAllMeasurements = payload => ({\n    type: 'DELETE_ALL_MEASUREMENTS',\n    payload,\n});\n","export const defaultState = {\n    isFetching: false,\n    users: [],\n    usersTotal:0,\n    loadedPages:[]\n};\n\nexport default function users(initialState = defaultState, action) {\n    switch (action.type) {\n        case \"USER_LIST_SET\":\n            return {\n                isFetching: false,\n                users: [\n                    ...initialState.users,\n                    ...action.payload.users\n                ],\n                loadedPages: [\n                    ...initialState.loadedPages,\n                    action.payload.loadedPages\n                ].sort(),\n                usersTotal: action.payload.usersTotal\n            };\n        case \"USER_LIST_FETCHING\":\n            return {\n                ...initialState,\n                isFetching: action.payload,\n            };\n        default:\n            return initialState;\n    }\n}","export const defaultState = {\n    measurements:[],\n};\n\n\nexport default function measurements(initialState = defaultState, action) {\n    switch (action.type) {\n        case \"ADD_MEASUREMENT\":\n            return {\n                measurements: [\n                    ...initialState.measurements,\n                    action.payload\n                ],\n            };\n        case \"DELETE_MEASUREMENT\":\n            return {\n                measurements: initialState.measurements.filter(item => (item.userId !== action.payload.userId\n                    || item.date !== action.payload.date\n                ))\n            };\n        case 'DELETE_ALL_MEASUREMENTS':\n            return {\n                measurements: initialState.measurements.filter(item =>\n                    (item.userId !== action.payload.userId))\n            };\n        default:\n            return initialState;\n    }\n}","export const defaultState = {\n    addingMeasurement: false,\n};\n\nexport default function addMeasurement(initialState = defaultState, action) {\n    switch (action.type) {\n        case \"TOGGLE_MEASUREMENT_DIALOG\":\n            return {\n                addingMeasurement: action.payload,\n            };\n        default:\n            return initialState;\n    }\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport users from '../components/UserList/UserList.reducers';\nimport measurements from '../components/Measurements/Measurements.reducers';\nimport addMeasurement from '../components/AddMeasurementDialog/AddMeasurementDialog.reducers';\nimport {combineReducers} from 'redux';\n\nconst addons = [applyMiddleware(thunk)];\n\nconst reducers = combineReducers({\n    users,\n    measurements,\n    addMeasurement\n});\n\n\nconst store = createStore(\n    reducers,\n    compose(...addons),\n);\n\nexport default store;","import React, {Component} from 'react';\nimport Button from \"@material-ui/core/Button/Button\";\nimport AddMeasurementDialog from \"../AddMeasurementDialog\";\nimport store from \"../../store\";\nimport toggleMeasurementDialog from '../AddMeasurementDialog/AddMeasurementDialog.actions';\nimport './Measurements.scss';\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport moment from \"moment\";\n\n/**\n * Creates measurements.\n * @namespace Measurements\n * @class Measurements\n */\nclass Measurements extends Component {\n    state = {page: 1, perPage: 5};\n\n    /** @function handleFirstPageButtonClick\n     * @memberof Measurements#\n     * sets page in state to 1\n     */\n    handleFirstPageButtonClick = () => {\n        this.setState({page: 1});\n    };\n\n    /** @function handleBackButtonClick\n     * @memberof Measurements#\n     * sets page in state to previous number\n     */\n    handleBackButtonClick = () => {\n        const page = this.state.page - 1;\n        this.setState({page: page});\n    };\n\n    /** @function handleNextButtonClick\n     * sets page in state to next number\n     * @memberof Measurements#\n     */\n    handleNextButtonClick = () => {\n        const page = this.state.page + 1;\n        this.setState({page: page});\n    };\n\n    /** @function handleLastPageButtonClick\n     * sets page in state to count of pages\n     * @memberof Measurements#\n     */\n    handleLastPageButtonClick = () => {\n        const {measurementsTotal} = this.props;\n        const page = Math.ceil(measurementsTotal / this.state.perPage);\n        this.setState({page: page});\n    };\n\n    /** @function addNewMeasurement\n     * opens add measurement dialog\n     * @memberof Measurements#\n     */\n    addNewMeasurement = () => {\n        store.dispatch(toggleMeasurementDialog(true));\n    };\n\n    /** @function deleteMeasurement\n     * deletes measurement\n     * @memberof Measurements#\n     * @param {String} userId - id of user\n     * @param {Date} date - date\n     */\n    deleteMeasurement = (userId, date) => {\n        const {deleteMeasurement} = this.props;\n        deleteMeasurement({userId, date});\n    };\n\n    /** @function deleteAllMeasurements\n     * deletes all measurements for user with userId\n     * @memberof Measurements#\n     * @param {String} userId - id of user\n     */\n    deleteAllMeasurements = (userId) => {\n        const {deleteAllMeasurements} = this.props;\n        deleteAllMeasurements({userId: userId});\n    };\n\n    render() {\n        const {classes, userId,measurements,measurementsTotal} = this.props;\n        const generateMeasurements = (measurement, index) => (\n            <div key={index} className=\"Measurements__measurement\">\n                <data value={measurement.weight}\n                      className=\"Measurements__weight\">{measurement.weight} kg\n                </data>\n                <time className=\"Measurements__time\">{moment(measurement.date).format('MMMM DD YYYY, HH:mm:ss A')}</time>\n                <Button color=\"primary\" variant=\"contained\" className=\"Measurements__deleteButton\"\n                        onClick={() => this.deleteMeasurement(userId, measurement.date)}>\n                    Delete\n                </Button>\n            </div>);\n        const current = [...measurements];\n        const allMeasurements = current\n            .slice((this.state.page - 1) * this.state.perPage, this.state.perPage * this.state.page)\n            .map(generateMeasurements);\n\n        return (\n                <article className=\"Measurements\">\n                    <h2 className=\"Measurements__title\">List of Weights</h2>\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={this.addNewMeasurement}\n                        className={classes.button}>\n                        Add New Entry\n                    </Button>\n                    <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() => this.deleteAllMeasurements(userId)}\n                        disabled={measurementsTotal === 0}\n                        className={classes.button}>\n                        Clear\n                    </Button>\n                    <AddMeasurementDialog userId={userId}/>\n                    {allMeasurements}\n                    <nav className=\"Measurements__pagination\">\n                        <IconButton\n                            onClick={this.handleFirstPageButtonClick}\n                            disabled={this.state.page === 1}\n                            aria-label=\"First Page\">\n                            <FirstPageIcon/>\n                        </IconButton>\n                        <IconButton\n                            onClick={this.handleBackButtonClick}\n                            disabled={this.state.page === 1}\n                            aria-label=\"Previous Page\">\n                            <KeyboardArrowLeft/>\n                        </IconButton>\n                        <IconButton\n                            onClick={this.handleNextButtonClick}\n                            disabled={measurementsTotal === 0 ||\n                            this.state.page === (Math.ceil(measurementsTotal / this.state.perPage))}\n                            aria-label=\"Next Page\">\n                            <KeyboardArrowRight/>\n                        </IconButton>\n                        <IconButton\n                            onClick={this.handleLastPageButtonClick}\n                            disabled={measurementsTotal === 0 ||\n                            this.state.page === (Math.ceil(measurementsTotal / this.state.perPage))}\n                            aria-label=\"Last Page\">\n                            <LastPageIcon/>\n                        </IconButton>\n                    </nav>\n                </article>\n        );\n    }\n}\n\nexport default Measurements;\n","import {getMeasurements} from './Measurements.selectors';\nimport { connect } from 'react-redux';\nimport Measurements from \"./Measurements\";\nimport {deleteMeasurement,deleteAllMeasurements} from './Measurements.actions';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst mapStateToProps = (state, props) => ({\n    measurements: getMeasurements(state, props.userId),\n    measurementsTotal: getMeasurements(state, props.userId).length\n});\n\n\nconst styles = theme => ({\n    button: {\n        marginRight: theme.spacing.unit,\n    },\n});\n\nconst mapDispatchToProps = {\n    deleteMeasurement,\n    deleteAllMeasurements\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Measurements));\n\n","import React, {Component} from 'react';\nimport Graph from \"../Graph\";\nimport Measurements from \"../Measurements\";\n\n/**\n * Creates user.\n * @namespace User\n * @class User\n */\nclass User extends Component {\n    render() {\n        const id = this.props.match.params.id;\n        return (\n            <>\n                <Graph userId={id}/>\n                <Measurements userId={id}/>\n            </>\n        );\n    }\n}\n\nexport default User;\n","import User from \"./User\";\nimport {withRouter} from \"react-router\";\n\nexport default withRouter(User);","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {Link} from \"react-router-dom\";\nimport './Landing.scss';\n\nconst MyLink = props => <Link to=\"/users\" {...props} />;\n\n/**\n * Creates Landing.\n * @namespace Landing\n * @class Landing\n */\nclass Landing extends Component {\n    render() {\n        return (\n                <article className=\"Landing\">\n                    <h1 className=\"Landing__title\">Weight Tracker App</h1>\n                    <Button component={MyLink} color=\"primary\" variant=\"contained\">\n                        Start\n                    </Button>\n                </article>\n        );\n    }\n}\n\nexport default Landing;\n","import React, {Component} from 'react';\nimport UserList from '../UserList';\nimport User from '../User';\nimport {Provider} from 'react-redux'\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport store from '../../store';\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport pink from '@material-ui/core/colors/pink';\nimport Landing from \"../Landing\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: blue,\n        secondary: pink,\n    },\n    typography: {\n        useNextVariants: true,\n    },\n});\n\n/**\n * Creates app.\n * @namespace App\n * @class App\n */\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Provider store={store}>\n                    <Router basename=\"/weight-app\">\n                        <>\n                            <Route path=\"/\" exact component={Landing}/>\n                            <Route path=\"/users\" exact component={UserList}/>\n                            <Route path=\"/users/:id\" exact component={User}/>\n                        </>\n                    </Router>\n                </Provider>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}